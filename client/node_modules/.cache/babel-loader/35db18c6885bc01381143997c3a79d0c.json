{"ast":null,"code":"var _jsxFileName = \"D:\\\\graphql-playlist\\\\client\\\\src\\\\components\\\\AddBook.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from '@apollo/client';\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { flowRight as compose } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddBook(props) {\n  _s();\n\n  const [name, setname] = useState(\"\");\n  const [genre, setgenre] = useState(\"\");\n  const [authorID, setauthorID] = useState(\"\");\n  const [newBook, setNewBook] = useState({}); //const { loading, error, data } = useQuery(getAuthorsQuery);\n\n  function displayAuthors() {\n    var data = props.getAuthorsQuery;\n\n    if (data.loading) {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        disabled: true,\n        children: \"Loading \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this);\n    } else {\n      return data.authors.map(author => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: author.id,\n          children: [\" \", author.name]\n        }, author.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this);\n      });\n    }\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    setNewBook({\n      name: name,\n      genre: genre,\n      authorID: authorID\n    });\n    console.log(newBook);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"add-book\",\n    onSubmit: submitForm,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Book Name : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Genre : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setgenre(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Author: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setauthorID(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Select Author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), displayAuthors()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddBook, \"O7sMJeyfUff0JC3Sfw79EnBxNkw=\");\n\n_c = AddBook;\n;\nexport default compose(graphql(getAuthorsQuery, {\n  name: \"getAuthorsQuery\"\n}), graphql(addBookMutation, {\n  name: \"addBookMutation\"\n}))(AddBook);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddBook\");","map":{"version":3,"sources":["D:/graphql-playlist/client/src/components/AddBook.js"],"names":["React","useState","useEffect","useQuery","getAuthorsQuery","addBookMutation","graphql","flowRight","compose","AddBook","props","name","setname","genre","setgenre","authorID","setauthorID","newBook","setNewBook","displayAuthors","data","loading","authors","map","author","id","submitForm","e","preventDefault","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useQuery } from '@apollo/client';\r\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\nimport { flowRight as compose } from 'lodash';\r\n\r\nfunction AddBook(props) {\r\n\r\n    const [name, setname] = useState(\"\");\r\n    const [genre, setgenre] = useState(\"\");\r\n    const [authorID, setauthorID] = useState(\"\");\r\n    const [newBook, setNewBook] = useState({});\r\n\r\n\r\n    //const { loading, error, data } = useQuery(getAuthorsQuery);\r\n\r\n    function displayAuthors() {\r\n        var data = props.getAuthorsQuery;\r\n        if (data.loading) {\r\n            return (<option disabled>Loading </option>);\r\n        } else {\r\n            return data.authors.map(author => {\r\n                return (<option key={author.id} value={author.id}> {author.name}</option>);\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        setNewBook({ name: name, genre: genre, authorID: authorID });\r\n        console.log(newBook);\r\n    }\r\n\r\n    return (\r\n        <form id=\"add-book\" onSubmit={submitForm} >\r\n            <div className=\"field\">\r\n                <label> Book Name : </label>\r\n                <input type=\"text\" onChange={(e) => setname(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"fields\">\r\n                <label> Genre : </label>\r\n                <input type=\"text\" onChange={(e) => setgenre(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n                <label> Author: </label>\r\n                <select onChange={(e) => setauthorID(e.target.value)} >\r\n                    <option>Select Author</option>\r\n                    {displayAuthors()}\r\n                </select>\r\n            </div>\r\n            <button>Add Book</button>\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n    graphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBook);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}