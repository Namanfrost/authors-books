{"ast":null,"code":"var _jsxFileName = \"D:\\\\graphql-playlist\\\\client\\\\src\\\\components\\\\AddBook.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery, compose } from '@apollo/client';\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddBook() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [name, setname] = useState(\"\");\n  const [genre, setgenre] = useState(\"\");\n  const [authorID, setauthorID] = useState(\"\");\n  const [newBook, setNewBook] = useState({});\n  useEffect(() => {}, [newBook]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getAuthorsQuery);\n\n  const submitForm = e => {\n    _s();\n\n    e.preventDefault();\n    setNewBook({\n      name: name,\n      genre: genre,\n      authorID: authorID\n    });\n    console.log(newBook);\n    const {\n      loading1,\n      error1,\n      data1\n    } = useQuery(addBookMutation);\n  };\n\n  _s(submitForm, \"k37ozb9BuvhITVCYDUg5sN0ryr8=\", false, function () {\n    return [useQuery];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"add-book\",\n    onSubmit: submitForm,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Book Name : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Genre : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setgenre(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Author: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setauthorID(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Select Author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), data.authors.map(author => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: author.id,\n          children: [\" \", author.name]\n        }, author.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AddBook, \"vXIIe7Ry3LT3Yam0NrUi7nDP9P4=\", false, function () {\n  return [useQuery];\n});\n\n_c = AddBook;\n;\nexport default compose(graphql(gql`query MyQuery1 { ... }`, {\n  skip: props => !props.useQuery1\n}), graphql(gql`query MyQuery2 { ... }`, {\n  skip: props => props.useQuery1\n}))(AddBook);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddBook\");","map":{"version":3,"sources":["D:/graphql-playlist/client/src/components/AddBook.js"],"names":["React","useState","useEffect","useQuery","compose","getAuthorsQuery","addBookMutation","graphql","AddBook","name","setname","genre","setgenre","authorID","setauthorID","newBook","setNewBook","loading","error","data","submitForm","e","preventDefault","console","log","loading1","error1","data1","target","value","authors","map","author","id","gql","skip","props","useQuery1"],"mappings":"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","sourcesContent":["import React, {  useState,useEffect } from \"react\";\r\nimport { useQuery ,compose} from '@apollo/client';\r\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries';\r\nimport { graphql } from '@apollo/client/react/hoc';\r\n\r\n\r\nfunction AddBook (){\r\n\r\n    const [name, setname] = useState(\"\");\r\n    const [genre, setgenre] = useState(\"\");\r\n    const [authorID, setauthorID] = useState(\"\");\r\n    const [newBook, setNewBook] = useState({});\r\n\r\n    useEffect(() => {\r\n\r\n    }, [newBook]);\r\n\r\n    const { loading, error, data } = useQuery(getAuthorsQuery);\r\n    \r\n  \r\n  \r\n\r\n\r\n\r\n\r\n    const submitForm = (e) =>{\r\n        e.preventDefault();\r\n        setNewBook({name : name,genre : genre ,authorID : authorID});\r\n        console.log(newBook);\r\n        const { loading1, error1, data1 } = useQuery(addBookMutation);\r\n    }\r\n \r\n    return (\r\n        <form id=\"add-book\" onSubmit={submitForm} >\r\n            <div className=\"field\">\r\n                <label> Book Name : </label>\r\n                <input type=\"text\"  onChange={(e)=>setname(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"fields\">\r\n                <label> Genre : </label>\r\n                <input type=\"text\" onChange={(e) => setgenre(e.target.value)}  />\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n                <label> Author: </label>\r\n                <select onChange={(e) => setauthorID(e.target.value)} >\r\n                    <option>Select Author</option>\r\n                    {data.authors.map((author) => (\r\n                        <option key={author.id} value={author.id}> {author.name}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <button>Add Book</button>\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\nexport default compose(\r\n    graphql(gql`query MyQuery1 { ... }`, { skip: props => !props.useQuery1 }),\r\n    graphql(gql`query MyQuery2 { ... }`, { skip: props => props.useQuery1 }),\r\n)(AddBook);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}